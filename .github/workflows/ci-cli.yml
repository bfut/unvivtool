name: ci-cli

env:
  SRC: unvivtool.c
  DEST: unvivtool
  BRANCHES: -DUVTVUTF8
  CPPFLAGS: -D_GLIBCXX_ASSERTIONS -fPIE -pie -Wl,-pie -fstack-clash-protection -fstack-protector-strong -D_FORTIFY_SOURCE=2 -s -O2
  CPPFLAGS_MACOS: -D_GLIBCXX_ASSERTIONS -fPIE -pie -Wl,-pie -fstack-protector-strong -D_FORTIFY_SOURCE=2 -s -O2
  GCCDEBUGFLAGS: -pedantic -g -Wall -Wextra -Wstack-protector -fasynchronous-unwind-tables
  CPPDEBUGFLAGS: -g -Wall -Wextra -Wstack-protector -fasynchronous-unwind-tables
  MINGWFLAGS: -std=c89 -fPIE -pie -Wl,-pie -s -O2 -Xlinker --no-insert-timestamp

on:
  push:
    branches:
  pull_request:
    branches:

jobs:
  linux:
    runs-on: ubuntu-latest
    name: Ubuntu C89/C++ (Linux/Win32)
    steps:
    - uses: actions/checkout@v3
    - name: Compile
      shell: bash
      run: |
        gcc -std=c89 "${{ env.SRC }}" -o "${{ env.DEST }}" ${{ env.GCCDEBUGFLAGS }} ${{ env.BRANCHES }}
        g++ -std=c++17 ${{ env.CPPFLAGS }} "${{ env.SRC }}" -o "${{ env.DEST }}_c++" ${{ env.CPPDEBUGFLAGS }} ${{ env.BRANCHES }}
        ls -lg

    - name: Store executables
      uses: actions/upload-artifact@v3
      with:
        name: unvivtool
        path: |
          ${{ env.DEST }}
          ${{ env.DEST }}_c++

    - name: Cross-compile for Windows
      run: |
        sudo apt install gcc-mingw-w64-i686
        i686-w64-mingw32-gcc-win32 $MINGWFLAGS $SRC -o "${{ env.DEST }}_mingw_x86.exe" ${{ env.GCCDEBUGFLAGS }} ${{ env.BRANCHES }}
        ls -lg

    - name: Store executables
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.DEST }}_mingw
        path: |
          ${{ env.DEST }}_mingw_x86.exe
          # ${{ env.DEST }}_c++

  macos:
    runs-on: macos-latest
    name: macOS C89/C++
    steps:
    - uses: actions/checkout@v3
    - name: Compile
      shell: bash
      run: |
        clang -std=c89 "${{ env.SRC }}" -o "${{ env.DEST }}_${{ runner.os }}" ${{ env.GCCDEBUGFLAGS }} ${{ env.BRANCHES }}
        clang++ -std=c++17 ${{ env.CPPFLAGS_MACOS }} "${{ env.SRC }}" -o "${{ env.DEST }}_${{ runner.os }}_c++" ${{ env.CPPDEBUGFLAGS }} ${{ env.BRANCHES }}
        ls -lg
    - name: Store executables
      uses: actions/upload-artifact@v3
      with:
        name: unvivtool_${{ runner.os }}
        path: |
          ${{ env.DEST }}_${{ runner.os }}
          ${{ env.DEST }}_${{ runner.os }}_c++
    # - run: |
    #       brew tap LouisBrunner/valgrind
    #       brew install --HEAD LouisBrunner/valgrind/valgrind
    #       valgrind ${{ env.DEST }}_${{ runner.os }}
    #       valgrind ${{ env.DEST }}_${{ runner.os }}_c++

  windows:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        arch: [ x86, x64 ]

    name: Windows (${{ matrix.arch }})
    steps:
    - name: Setup Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
    - uses: actions/checkout@v3
    - name: Compile
      run: |
        cl.exe /W3 /utf-8 /DUVTVUTF8 /O2 unvivtool.c /Fe:unvivtool_${{ matrix.arch }}.exe
        dir
    - name: Store executable
      uses: actions/upload-artifact@v3
      with:
        name: unvivtool_${{ matrix.arch }}.exe
        path: unvivtool_${{ matrix.arch }}.exe


  test-linux:
    runs-on: ${{ matrix.os }}
    env:
      valgrind: "valgrind -v --leak-check=full --show-leak-kinds=all --track-origins=yes"
    needs:
      - linux
      - macos
      - windows

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ "3.11" ]
        std: [ "", "_c++" ]

    name: Test ${{ matrix.os }} ${{ matrix.std }} (Python ${{ matrix.python-version }})
    steps:
    - uses: actions/checkout@v3
    - name: Download executable
      uses: actions/download-artifact@v3
      with:
        name: unvivtool
    - run: ls -lg
    - run: chmod +x unvivtool${{ matrix.std }}
    - name: Install valgrind
      shell: bash
      run: |
        sudo apt install valgrind
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: "pytest"
      shell: bash
      run: |
        python -m pip install -q pytest
        pytest ./tests/test_cli_decodeencode${{ matrix.std }}.py -vvs


  test-macos:
    runs-on: ${{ matrix.os }}
    needs:
      - linux
      - macos
      - windows

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]
        python-version: [ "3.11" ]
        std: [ "", "_c++" ]

    name: Test ${{ matrix.os }} ${{ matrix.std }} (Python ${{ matrix.python-version }})
    steps:
    - uses: actions/checkout@v3
    - name: Download executable
      uses: actions/download-artifact@v3
      with:
        name: unvivtool_${{ runner.os }}
    - run: ls -lg
    - run: chmod +x unvivtool_${{ runner.os }}${{ matrix.std }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: "pytest"
      shell: bash
      run: |
        ls -lg
        python -m pip install -q pytest
        pytest ./tests/test_cli_decodeencode${{ matrix.std }}.py -vvs


  test-windows:
    runs-on: ${{ matrix.os }}
    needs:
      - linux
      - macos
      - windows

    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        arch: [ x86, x64 ]
        python-version: [ "3.11" ]

    name: Test ${{ matrix.arch }}-${{ matrix.os }} (python-${{ matrix.python-version }})
    steps:
    - uses: actions/checkout@v3
    - name: Download executable
      uses: actions/download-artifact@v3
      with:
        name: unvivtool_${{ matrix.arch }}.exe
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}
    - name: "pytest"
      shell: bash
      run: |
        python -m pip install -q pytest
        pytest ./tests/test_cli_decodeencode.py -vvs
